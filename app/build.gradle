import com.android.build.gradle.internal.LoggerWrapper
import com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask
import io.gitlab.arturbosch.detekt.DetektCreateBaselineTask

plugins {
    id("com.starter.application.android")
    id("com.starter.easylauncher")
    id("org.jetbrains.kotlin.kapt")
    id("org.jetbrains.kotlin.plugin.parcelize")
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics")
    id("com.slack.keeper")
    id("com.google.firebase.firebase-perf")
    id("pl.droidsonroids.animation-disabler")
}

keeper {
    variantFilter {
        setIgnore(name != "releaseTest")
    }
    traceReferences {}
}

projectConfig {
    javaFilesAllowed true
}

def findProperty(key) {
    return properties[key] ?: System.getenv(key) ?: System.getenv(key.replace(".", "_").toUpperCase()) ?: ""
}

android {
    defaultConfig {
        applicationId "io.github.wykopmobilny"

        testInstrumentationRunner = "io.github.wykopmobilny.DefaultTestRunner"
        buildConfigField 'String', 'APP_SECRET', "\"${findProperty("wykop.secretKey")}\""
        buildConfigField 'String', 'APP_KEY', "\"${findProperty("wykop.appKey")}\""
        buildConfigField "String", "GOOGLE_KEY", "\"${findProperty("wykop.googleKey")}\""
        resValue "string", "GOOGLE_API_KEY", "${findProperty("wykop.googleKey")}"
    }
    testBuildType findProperty("testBuildType") ?: "debug"

    signingConfigs {
        named("debug") {
            storeFile rootProject.file("keys/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        register("release") {
            storeFile rootProject.file("keys/release.keystore")
            storePassword findProperty("wykop.keystore.password")
            keyAlias findProperty("wykop.keystore.key.name")
            keyPassword findProperty("wykop.keystore.key.password")
        }
    }

    buildTypes {
        named("debug") {
            signingConfig signingConfigs.getByName("debug")
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        named("release") {
            minifyEnabled true
            signingConfig signingConfigs.getByName("release")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            firebaseCrashlytics.mappingFileUploadEnabled findProperty("uploadMapping") == "true"
        }
        register("releaseTest") {
            initWith getByName("release")
            signingConfig signingConfigs.getByName("debug")
            testProguardFile "proguard-rules-test.pro"
            firebaseCrashlytics.mappingFileUploadEnabled false
        }
    }

    buildFeatures {
        viewBinding true
        resValues true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/*.version'
        exclude '*.properties'
        exclude 'DebugProbesKt.bin'
    }
    lintOptions {
        disable("UnknownNullness")
        disable("Range")
    }
}

kotlinter {
    experimentalRules = false
}

repositories {
    google()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation(projects.data.wykop.remote)
    implementation(projects.data.github.remote)
    implementation(projects.data.scraper.remote)
    implementation(projects.data.storage.android)
    implementation(projects.data.framework.android)
    implementation(projects.data.cache.sqldelight)
    implementation(projects.ui.base.android)
    implementation(projects.ui.login.android)
    implementation(projects.ui.settings.android)
    implementation(projects.ui.blacklist.android)
    implementation(projects.ui.styles.android)
    implementation(projects.ui.profile.android)
    implementation(projects.ui.search.android)
    implementation(projects.domain)
    implementation("androidx.recyclerview:recyclerview:1.2.1")
    implementation("androidx.appcompat:appcompat:1.4.0-alpha03")
    implementation("androidx.exifinterface:exifinterface:1.3.3")
    implementation("androidx.cardview:cardview:1.0.0")
    implementation("androidx.preference:preference-ktx:1.1.1")
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
    implementation("androidx.browser:browser:1.3.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.0")
    implementation("com.github.usefulness:slidr:3.0.0")
    def exoplayerVersion = "2.15.0"
    implementation("com.google.android.exoplayer:exoplayer:$exoplayerVersion")
    implementation("com.google.android.exoplayer:extension-okhttp:$exoplayerVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.5.1")
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.github.chrisbanes:PhotoView:2.3.0")
    implementation("com.davemorrissey.labs:subsampling-scale-image-view-androidx:3.10.0")
    implementation(platform("com.google.firebase:firebase-bom:28.3.0"))
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation("com.google.firebase:firebase-crashlytics-ktx")
    implementation("com.google.firebase:firebase-perf-ktx")
    implementation("com.google.firebase:firebase-config-ktx")
    implementation("org.jetbrains:markdown:0.2.4")
    implementation(files('libs/YouTubeAndroidPlayerApi.jar'))

    //noinspection GradleDependency
    implementation("org.ocpsoft.prettytime:prettytime:4.0.4.Final")
    implementation("io.reactivex.rxjava2:rxandroid:2.1.1")
    implementation("io.reactivex.rxjava2:rxjava:2.2.21")
    implementation("com.jakewharton.threetenabp:threetenabp:1.3.1")

    // Dagger 2
    def daggerVersion = "2.38"
    implementation("com.google.dagger:dagger-android-support:$daggerVersion")
    kapt("com.google.dagger:dagger-compiler:$daggerVersion")
    kapt("com.google.dagger:dagger-android-processor:$daggerVersion")
    kaptAndroidTest("com.google.dagger:dagger-compiler:$daggerVersion")
    kaptAndroidTest("com.google.dagger:dagger-android-processor:$daggerVersion")

    // Glide
    def glide = "4.12.0"
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    kaptAndroidTest "com.github.bumptech.glide:compiler:$glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide"

    // Unit tests
    testImplementation("junit:junit:4.13.2")

    androidTestImplementation("androidx.test:core-ktx:1.4.0")
    androidTestImplementation("androidx.test.ext:junit-ktx:1.1.3")
    def espressoVersion = "3.4.0"
    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-intents:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude(group: "com.google.protobuf", module: "protobuf-lite")
    }
    androidTestImplementation("com.squareup.okhttp3:mockwebserver:4.9.1")
}

tasks.named("detekt") {
    baseline = file("$rootDir/detekt-baseline.xml")
}

tasks.register("detektProjectBaseline", DetektCreateBaselineTask) {
    description = "Overrides current baseline."
    ignoreFailures.set(true)
    buildUponDefaultConfig.set(true)
    setSource(files(rootDir))
    config.setFrom(tasks.getByName("detekt").config)
    baseline.set(file("$rootDir/detekt-baseline.xml"))
    include("**/*.kt")
    include("**/*.kts")
    exclude("**/resources/**")
    exclude("**/build/**")
}

tasks.withType(DeviceProviderInstrumentTestTask).configureEach {
    doFirst {
        LoggerWrapper.Switch.shouldShowInfoLogsAsLifecycle = true
    }

    doLast {
        LoggerWrapper.Switch.shouldShowInfoLogsAsLifecycle = false
    }
}

easylauncher {
    buildTypes {
        debug {
            filters = customRibbon(ribbonColor: "#2F4F4F", position: "bottom")
        }
    }
}
